def projectName = 'NucleusLocalizer'
def majorVersion = '0'
def minorVersion = '0'
def buildBy = null
def providedDependsFiles = null
def providedDepends = null
def compileDependsFiles = [
        //'C:/JavaRepo/asm-all-5.0.3.jar'
]
def compileDepends = [
        'org.ow2.asm:asm:5.0.3'
]
def includeFiles = [
        'LICENSE.txt'
]


/* Maven Repository Task Stuff */
def shCmd = 'D:/mvn-repo/bin/sh.exe'
def mavenCmd = 'D:/apache-maven-3.2.5/bin/mvn'
def mavenFolder = 'D:/mvn-repo/'
def mavenGroupId = 'com.jcwhatever.bukkit'
def mavenArtifactId = projectName
def mavenVersion = majorVersion + '.' + minorVersion + '.SNAPSHOT'

/* Begin */

// Set version number
if (hasProperty("teamcity")) {
    version = majorVersion + '.' + minorVersion + '.' + teamcity["build.number"] + '.git-' + teamcity["build.vcs.number"]

    if (buildBy == null) {
        buildBy = teamcity["build.triggeredBy.username"]

        if (!buildBy) {
            buildBy = teamcity["build.triggeredBy"]
        }

        if (!buildBy) {
            buildBy = teamcity["agent.name"]
        }
    }

}else {
    version = majorVersion + '.' + minorVersion + '.000.git-unknown'
}

if (buildBy == null) {
    buildBy = System.properties['user.name']
}

defaultTasks 'build'

apply plugin: 'java'

// Minimum Java Version
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

// Add provided configuration to prevent dependencies
// from being included in the jar
configurations {
    provided
}

sourceSets {

    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided

        java {
            srcDir 'src'
        }
    }

    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies { classpath 'org.ajoberstar:gradle-git:0.2.3' }
}

repositories {
    mavenCentral()

    for (repo in mavenRepositories) {
        maven {
            url repo
        }
    }
}

// Add dependencies
dependencies {

    if (compileDependsFiles) {
        compile files(compileDependsFiles)
    }

    if (providedDependsFiles) {
        provided files(providedDependsFiles)
    }

    if (compileDepends) {
        compile compileDepends
    }

    if (providedDepends) {
        provided providedDepends
    }
}

def manifestAttr = manifest {
    attributes("Built-By": buildBy,
            "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
            "Implementation-Title": projectName,
            "Implementation-Version": version)
}

// Jar file output with version number
jar {

    archiveName = projectName + '.' + version + '.jar'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    if (includeFiles) {
        from includeFiles
    }

    manifest = manifestAttr
}

// Task to create a Jar file artifact with no version number
task simpleNamedJar(type: Jar) {

    archiveName = projectName + '.jar'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    if (includeFiles) {
        from includeFiles
    }

    manifest = manifestAttr

    with jar
}

artifacts {
    archives simpleNamedJar
}

/* Maven Snapshot Update Tasks */
import org.ajoberstar.gradle.git.tasks.*
task cloneMaven(type: GitClone) {
    def destination = file(mavenFolder)
    uri = "https://github.com/JCThePants/mvn-repo.git"
    destinationPath = destination
    bare = false
    enabled = !destination.exists()
}

task updateLocalMavenHolding(type: Copy) {
    from file('build/libs/' + projectName + '.jar')
    into file(mavenFolder + 'holding')
}

task updateLocalMaven(type: Exec) {
    workingDir mavenFolder
    executable shCmd
    args '--login', '-i', '-c', mavenCmd + ' install:install-file -DgroupId=' + mavenGroupId +
            ' -DartifactId=' + mavenArtifactId + ' -Dversion=' + mavenVersion + ' -Dfile=holding/' + projectName + '.jar -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=';
}